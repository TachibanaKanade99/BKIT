----- BKIT.g4 -------
// ID: 1752595
grammar BKIT;

@lexer::header {
from lexererr import *
}

@lexer::members {
def emit(self):
    tk = self.type
    result = super().emit()
    if tk == self.UNCLOSE_STRING:       
        raise UncloseString(result.text)
    elif tk == self.ILLEGAL_ESCAPE:
        raise IllegalEscape(result.text)
    elif tk == self.ERROR_CHAR:
        raise ErrorToken(result.text)
    elif tk == self.UNTERMINATED_COMMENT:
        raise UnterminatedComment()
    else:
        return result;
}

options{
	language=Python3;
}

// Parser:

// Program Structure:
program: many_declars EOF;
many_declars: global_var_declar_lst func_declar_lst;

// Global variable declaration:
global_var_declar_lst: var_decl many_var_decl | ;
many_var_decl: var_decl many_var_decl | ;

// Variable declaration:
var_decl: VAR COLON var_lst SEMI;
var_lst: var many_var;
many_var: COMMA var many_var | ;

// Variable:
var: ( ID | composite_var ) initial_value;
initial_value: ASSIGN lit | ;
composite_var: ID dimension_lst;
dimension_lst: dimension many_dimension;
many_dimension: dimension many_dimension | ;
dimension: LSB INT_LIT RSB;

// Function Delcaration:
func_declar_lst: func_decl many_func_decl | ;
many_func_decl: func_decl many_func_decl | ;
func_decl: FUNCTION COLON func_name func_param? body;
func_name: ID;

// Function parameter:
func_param: PARAMETER COLON param_lst;
param_lst: param many_params;
many_params: COMMA param many_params | ;
param: ID | composite_var;

// Function Body:
body: BODY COLON stmt_lst ENDBODY DOT;
stmt_lst: stmt many_stmts | ;
many_stmts: stmt many_stmts | ;

// Main function:
// main_func: FUNCTION COLON 'main' body;

// Expression:

expr: operand_1 (EQ | NOT_EQ) operand_1
    | operand_1 (LESS | GREATER) operand_1
    | operand_1 (LESS_EQ | GREATER_EQ) operand_1
    | operand_1 FLOAT_NOT_EQ operand_1
    | operand_1 (FLOAT_LESS | FLOAT_GREATER) operand_1
    | operand_1 (FLOAT_LESS_EQ | FLOAT_GREATER_EQ) operand_1
    | operand_1;
operand_1: operand_1 (AND | OR) operand_2 | operand_2;
operand_2: operand_2 (PLUS | FLOAT_PLUS | MINUS | FLOAT_MINUS) operand_3 | operand_3;
operand_3: operand_3 (MUL | FLOAT_MUL | DIV | FLOAT_DIV | MOD) operand_4 | operand_4;
operand_4: NOT operand_4 | operand_5;
operand_5: (MINUS | FLOAT_MINUS) operand_5 | index_expr;

//Index expression:
index_expr: index_expr index_ops | func_call;
// Index operators:
index_ops: LSB expr RSB | LSB expr RSB index_ops;

// Function call:
func_call: ID LP argument_lst RP | operand;
operand: lit | ID | LP expr RP;

// Function call:
argument_lst: argument many_arguments | ;
many_arguments: COMMA argument many_arguments | ;
argument: expr;


// Statement:
stmt: var_decl | assign_stmt | if_stmt | for_stmt | while_stmt | do_while_stmt | break_stmt | continue_stmt | call_stmt | return_stmt;

// Assign Statement:
assign_stmt: (ID | index_expr) ASSIGN expr SEMI;

// If Statement:
if_stmt: IF expr THEN stmt_lst elseif_stmt_lst else_stmt ENDIF DOT;

// ElseIf Statement:
elseif_stmt_lst: elseif_stmt many_elseif_stmts | ;
many_elseif_stmts: elseif_stmt many_elseif_stmts | ; 
elseif_stmt: ELSEIF expr THEN stmt_lst;

// Else Statement:
else_stmt: ELSE stmt_lst | ;

// For Statement:
for_stmt: FOR LP ID ASSIGN expr COMMA expr COMMA expr RP DO stmt_lst ENDFOR DOT;

// While Statement:
while_stmt: WHILE expr DO stmt_lst ENDWHILE DOT;

// Do While Statement:
do_while_stmt: DO stmt_lst WHILE expr ENDDO DOT;

// Break Statement:
break_stmt: BREAK SEMI;

// Continue Statement:
continue_stmt: CONTINUE SEMI;

// Call Statement:
call_stmt: ID LP expr_lst RP SEMI;
expr_lst: expr many_exprs | ;
many_exprs: COMMA expr many_exprs | ;

// Return Statement:
return_stmt: RETURN SEMI | RETURN expr SEMI;

// Lexical:

// Keywords:

BODY: 'Body';
BREAK: 'Break';
CONTINUE: 'Continue';
DO: 'Do';
ELSE: 'Else';
ELSEIF: 'ElseIf';
ENDBODY: 'EndBody';
ENDIF: 'EndIf';
ENDFOR: 'EndFor';
ENDWHILE: 'EndWhile';
FOR: 'For';
FUNCTION: 'Function';
IF: 'If';
PARAMETER: 'Parameter';
RETURN: 'Return';
THEN: 'Then';
VAR: 'Var';
WHILE: 'While';
TRUE: 'True';
FALSE: 'False';
ENDDO: 'EndDo';

// Operators:
PLUS: '+';
FLOAT_PLUS: '+.';
MINUS: '-';
FLOAT_MINUS: '-.';
MUL: '*';
FLOAT_MUL: '*.';
DIV: '\\';
FLOAT_DIV: '\\.';
MOD: '%';
NOT: '!';
AND: '&&';
OR: '||';
EQ: '==';
NOT_EQ: '!=';
LESS: '<';
GREATER: '>';
LESS_EQ: '<=';
GREATER_EQ: '>=';
FLOAT_NOT_EQ: '=/=';
FLOAT_LESS: '<.';
FLOAT_GREATER: '>.';
FLOAT_LESS_EQ: '<=.';
FLOAT_GREATER_EQ: '>=.';
ASSIGN: '=';

// Separators:
LP: '(';
RP: ')';
LB: '{';
RB: '}';
LSB: '[';
RSB: ']';
COLON: ':';
DOT: '.';
COMMA: ',';
SEMI: ';';

// Identifiers:
ID: [a-z][a-zA-Z_0-9]*;

COMMENT: '**' .*? '**' -> skip; // comment
WS : [ \t\r\n]+ -> skip; // skip spaces, tabs, newlines

// Literals:

// Integer Literal:
fragment DIGIT: [0-9];
fragment INT: [1-9] DIGIT* | '0';
fragment HEXA_DEC: '0'[Xx] [1-9A-F] [0-9A-F]*;
fragment OCTAL: '0'[oO] [1-7] [0-7]*;
INT_LIT: INT | HEXA_DEC | OCTAL;

// Float Literal:
fragment DECIMAL_PART: '.' DIGIT*;
fragment EXPONENT_PART: [Ee] [+-]? DIGIT+;
FLOAT_LIT: DIGIT+ DECIMAL_PART? EXPONENT_PART | DIGIT+ DECIMAL_PART EXPONENT_PART?;

// Boolean Literal:
bool_lit: TRUE | FALSE;

// String Literals:
fragment ESCAPE_QUOTE: '\'' '"';
fragment ESCAPE_CHAR: '\\' [bfrnt'\\]; 
STRING_LIT: '"' ( ~['"\b\f\r\n\t\\] | ESCAPE_CHAR | ESCAPE_QUOTE )* '"' {self.text = self.text[1:-1]};

lit: INT_LIT | FLOAT_LIT | STRING_LIT | bool_lit | array_lit;

// Array Literals:
array_lit: LB lit_list RB;
lit_list: lit many_lits;
many_lits: COMMA lit many_lits | ;



ERROR_CHAR: .;
UNCLOSE_STRING: '"' ( ~['"\b\f\r\n\t\\] | ESCAPE_CHAR | ESCAPE_QUOTE )* {self.text = self.text[1:]};
ILLEGAL_ESCAPE: '"' ( ~['"\b\f\r\n\t\\] | ESCAPE_CHAR | ESCAPE_QUOTE )* ('\\' ~[bfrnt'\\] | '\'' ~["] ) {self.text = self.text[1:]};
UNTERMINATED_COMMENT: '**' .?;

----------Result----------
testcase 1: PASSED
testcase 2: PASSED
testcase 3: PASSED
testcase 4: PASSED
testcase 5: PASSED
testcase 6: PASSED
testcase 7: PASSED
testcase 8: PASSED
testcase 9: PASSED
testcase 10: PASSED
testcase 11: PASSED
testcase 12: PASSED
testcase 13: PASSED
testcase 14: PASSED
testcase 15: PASSED
testcase 16: PASSED
testcase 17: PASSED
testcase 18: PASSED
testcase 19: PASSED
testcase 20: PASSED
testcase 21: PASSED
testcase 22: PASSED
testcase 23: PASSED
testcase 24: PASSED
testcase 25: PASSED
testcase 26: PASSED
testcase 27: PASSED
testcase 28: PASSED
testcase 29: PASSED
testcase 30: PASSED
testcase 31: PASSED
testcase 32: PASSED
testcase 33: PASSED
testcase 34: PASSED
testcase 35: PASSED
testcase 36: PASSED
testcase 37: PASSED
testcase 38: PASSED
testcase 39: PASSED
testcase 40: PASSED
testcase 41: PASSED
testcase 42: PASSED
testcase 43: PASSED
testcase 44: PASSED
testcase 45: PASSED
testcase 46: PASSED
testcase 47: PASSED
testcase 48: PASSED
testcase 49: PASSED
testcase 50: PASSED
testcase 51: PASSED
testcase 52: PASSED
testcase 53: PASSED
testcase 54: PASSED
testcase 55: PASSED
testcase 56: PASSED
testcase 57: PASSED
testcase 58: PASSED
testcase 59: PASSED
testcase 60: PASSED
testcase 61: PASSED
testcase 62: FAILED
testcase 63: PASSED
testcase 64: FAILED
testcase 65: PASSED
testcase 66: PASSED
testcase 67: PASSED
testcase 68: PASSED
testcase 69: PASSED
testcase 70: PASSED
testcase 71: PASSED
testcase 72: PASSED
testcase 73: PASSED
testcase 74: PASSED
testcase 75: PASSED
testcase 76: PASSED
testcase 77: PASSED
testcase 78: PASSED
testcase 79: PASSED
testcase 80: PASSED
testcase 81: PASSED
testcase 82: PASSED
testcase 83: PASSED
testcase 84: PASSED
testcase 85: PASSED
testcase 86: PASSED
testcase 87: PASSED
testcase 88: PASSED
testcase 89: PASSED
testcase 90: PASSED
testcase 91: PASSED
testcase 92: PASSED
testcase 93: PASSED
testcase 94: PASSED
testcase 95: PASSED
testcase 96: PASSED
testcase 97: PASSED
testcase 98: PASSED
testcase 99: PASSED
testcase 100: PASSED
testcase 101: PASSED
testcase 102: PASSED
testcase 103: PASSED
testcase 104: PASSED
testcase 105: PASSED
testcase 106: PASSED
testcase 107: PASSED
testcase 108: PASSED
testcase 109: PASSED
testcase 110: PASSED
testcase 111: PASSED
testcase 112: PASSED
testcase 113: PASSED
testcase 114: PASSED
testcase 115: PASSED
testcase 116: PASSED
testcase 117: PASSED
testcase 118: PASSED
testcase 119: PASSED
testcase 120: PASSED
testcase 121: PASSED
testcase 122: PASSED
testcase 123: PASSED
testcase 124: PASSED
testcase 125: PASSED
testcase 126: PASSED
testcase 127: PASSED
testcase 128: PASSED
testcase 129: PASSED
testcase 130: PASSED
testcase 131: PASSED
testcase 132: PASSED
testcase 133: PASSED
testcase 134: PASSED
testcase 135: PASSED
testcase 136: PASSED
testcase 137: PASSED
testcase 138: PASSED
testcase 139: PASSED
testcase 140: PASSED
testcase 141: PASSED
testcase 142: PASSED
testcase 143: PASSED
testcase 144: PASSED
testcase 145: PASSED
testcase 146: PASSED
testcase 147: PASSED
testcase 148: FAILED
testcase 149: PASSED
testcase 150: PASSED
testcase 151: PASSED
testcase 152: PASSED
testcase 153: PASSED
testcase 154: PASSED
testcase 155: PASSED
testcase 156: PASSED
testcase 157: PASSED
testcase 158: PASSED
testcase 159: PASSED
testcase 160: PASSED
testcase 161: PASSED
testcase 162: PASSED
testcase 163: PASSED
testcase 164: PASSED
testcase 165: PASSED
testcase 166: PASSED
testcase 167: PASSED
testcase 168: PASSED
testcase 169: PASSED
testcase 170: PASSED
testcase 171: PASSED
testcase 172: PASSED
testcase 173: PASSED
testcase 174: PASSED
testcase 175: PASSED
testcase 176: PASSED
testcase 177: PASSED
testcase 178: PASSED
testcase 179: PASSED
testcase 180: PASSED
testcase 181: PASSED
testcase 182: FAILED
testcase 183: PASSED
testcase 184: PASSED
testcase 185: PASSED
testcase 186: PASSED
testcase 187: FAILED
testcase 188: PASSED
testcase 189: PASSED
testcase 190: PASSED
testcase 191: PASSED
testcase 192: PASSED
testcase 193: PASSED
testcase 194: PASSED
testcase 195: PASSED
testcase 196: PASSED
testcase 197: FAILED
testcase 198: PASSED
testcase 199: PASSED
testcase 200: PASSED

Total: 194 /200
